[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Joshua R. Loftus Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/lasso-screening.html","id":"lasso-variable-selection","dir":"Articles","previous_headings":"","what":"Lasso variable selection","title":"lasso-screening","text":"high-dimensional regression \\(n\\) observations, \\(p\\) predictor variables, \\(p > n\\), fit ordinary least squares. One strategy around bet sparsity: assume true (good enough) linear model relatively small number \\(s_0 < n\\) nonzero coefficients. lasso (1996) can used fit linear model high-dimensional data. typically results fit nonzero coefficient estimates. glmnet package (2010) standard software implementation can also use cross-validation choose regularization parameter. vignette show use simcity simulate many high-dimensional datasets true model sparse linear model, use lasso glmnet::cv.glmnet fit estimated model, check whether estimated model certain property call screening. means selected model’s support superset true support, .e. selected variables include ones nonzero coefficients true model.","code":"library(simcity) #> Loading required package: doParallel #> Loading required package: foreach #> Loading required package: iterators #> Loading required package: parallel #> Loading required package: glmnet #> Loading required package: Matrix #> Loaded glmnet 4.1-4 #> Loading required package: hdi #> Loading required package: scalreg #> Loading required package: lars #> Loaded lars 1.3 devtools::load_all() # why tho #> ℹ Loading simcity"},{"path":"/articles/lasso-screening.html","id":"a-single-simulated-dataset","dir":"Articles","previous_headings":"Lasso variable selection","what":"A single simulated dataset","title":"lasso-screening","text":"First let’s look one example instance, showing true estimated coefficients: coefficients nonzero true model? coefficients nonzero lasso selected model? selected model succeed screening?","code":"set.seed(1) n <- 50 p <- 100 s0 <- 2 one_lasso_fit <- instance_hdr(n, p, s0) one_lasso_fit |> head() #>          term   estimate true_beta #> 1 (Intercept)  0.1320102  0.000000 #> 2          V1  0.9894033  1.427502 #> 3          V2 -1.5176728 -1.833628 #> 4          V3  0.0000000  0.000000 #> 5          V4  0.0000000  0.000000 #> 6          V5  0.0000000  0.000000 true_support <- which(one_lasso_fit$true_beta != 0) true_support #> [1] 2 3 estimated_support <- which(one_lasso_fit$estimate != 0) estimated_support #> [1]  1  2  3 80 all(true_support %in% estimated_support) #> [1] TRUE"},{"path":"/articles/lasso-screening.html","id":"many-simulated-datasets","dir":"Articles","previous_headings":"Lasso variable selection","what":"Many simulated datasets","title":"lasso-screening","text":"’ll use simulate_hdr function, first ’re going setup simulation parameters save computation optionally saving resulting data soo can re-loaded later. frequency screening? smallest truly nonzero coefficient different cases screening occurred?","code":"n <- 100 p <- 200 s0 <- 5 niters <- 100 sim_results_file <- \"./data/lasso-screening.csv\" # Check whether results already saved if (file.exists(sim_results_file)) {   sim_summary <- read.csv(sim_results_file)   print(paste0(     \"Loading saved simulation results with \",     nrow(sim_summary), \" iterates\")) } else {   # run simulation   many_lasso_fits <- simulate_hdr(niters, n, p, s0)   sim_summary <- simmary_coefs(many_lasso_fits)   write.csv(sim_summary, sim_results_file) } head(sim_summary) #>   screened         mse    beta_min #> 1     TRUE 0.002099870 0.871048470 #> 2    FALSE 0.002018456 0.012825806 #> 3    FALSE 0.001987742 0.008152623 #> 4     TRUE 0.003227748 0.963045234 #> 5    FALSE 0.002000449 0.006364354 #> 6     TRUE 0.001400957 0.597323130 mean(sim_summary$screened) #> [1] 0.5 ggplot(sim_summary, aes(screened, beta_min)) +    geom_boxplot() +   theme_minimal()"},{"path":"/articles/lasso-screening.html","id":"sparsity-and-screening-probability","dir":"Articles","previous_headings":"Lasso variable selection","what":"Sparsity and screening probability","title":"lasso-screening","text":"Let’s now compute rate screening function sparsity true model, keeping parameters fixed.  can see frequency screening decreases true sparsity increases. also, true coefficients (default) drawn uniform distribution \\(U[-2, 2]\\). can see average (simulation instances) minimum coefficient, avg_bmin, also decreasing. separate effects, let’s run simulation pass option generate nonzero coefficients constant = 1.","code":"n <- 100 p <- 200 sparsities <- 1 + 2*0:15 niters <- 200 sim_results_file <- \"./data/lasso-screening-sparsity.csv\" # Check whether results already saved if (file.exists(sim_results_file)) {   sim_summary <- read.csv(sim_results_file)   print(paste0(     \"Loading saved simulation results with \",     nrow(sim_summary), \" rows\")) } else {   # run simulation   time_start <- Sys.time()   full_results <- purrr::map_dfr(sparsities,               function(s0) {                 many_fits <- simulate_hdr(niters, n, p, s0)                 sim_summary <- simmary_coefs(many_fits)                 sim_summary$sparsity <- s0                 sim_summary               })   sim_summary <- full_results |>     group_by(sparsity) |>     summarize(screening = mean(screened),               avg_bmin = mean(beta_min))   time_end <- Sys.time()   print(time_end - time_start)   write.csv(sim_summary, sim_results_file) } #> Time difference of 5.272027 mins sim_summary |>   ggplot(aes(sparsity, screening)) +   geom_col(aes(fill = avg_bmin)) +   scale_fill_viridis_c(direction = -1) sim_results_file <- \"./data/lasso-screening-sparsity-bfix1.csv\" # Check whether results already saved if (file.exists(sim_results_file)) {   sim_bfix_summary <- read.csv(sim_results_file)   print(paste0(     \"Loading saved simulation results with \",     nrow(sim_summary), \" rows\")) } else {   # run simulation   time_start <- Sys.time()   full_results <- purrr::map_dfr(sparsities,               function(s0) {                 many_fits <- simulate_hdr(niters, n, p, s0,                                           btype = \"bfix1\")                 sim_summary <- simmary_coefs(many_fits)                 sim_summary$sparsity <- s0                 sim_summary               })   sim_bfix_summary <- full_results |>     group_by(sparsity) |>     summarize(screening = mean(screened),               avg_bmin = mean(beta_min))   time_end <- Sys.time()   print(time_end - time_start)   write.csv(sim_bfix_summary, sim_results_file) } #> Time difference of 5.536909 mins sim_bfix_summary |>   ggplot(aes(sparsity, screening)) +   geom_col(aes(fill = avg_bmin)) +   scale_fill_viridis_c(direction = -1)"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joshua R Loftus. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Loftus JR (2022). simcity: Parallel Simulations Common Statistical Tasks. R package version 0.1.0, https://github.com/joftius/simcity.","code":"@Manual{,   title = {simcity: Parallel Simulations For Common Statistical Tasks},   author = {Joshua R Loftus},   year = {2022},   note = {R package version 0.1.0},   url = {https://github.com/joftius/simcity}, }"},{"path":"/index.html","id":"simcity","dir":"","previous_headings":"","what":"Parallel Simulations For Common Statistical Tasks","title":"Parallel Simulations For Common Statistical Tasks","text":"goal simcity streamline simulating data evaluate compare methods common statistical tasks.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Parallel Simulations For Common Statistical Tasks","text":"can install development version simcity GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"joftius/simcity\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Parallel Simulations For Common Statistical Tasks","text":"first motivating example package simulating high-dimensional linear regression models, fitting lasso, analyzing various performance metrics. example generates one instance simulated data, fits regression model using glmnet::cv.glmnet lambda.1se option default. simcity package streamlines processes like many times, typically finishes half time (less) using parallel processing. example generates number niters instances simulated data, fits using cv.glmnet, computes interesting summaries overall results.","code":"library(simcity) n <- 100 p <- 200 s0 <- 5 one_lasso_fit <- instance_hdr(n, p, s0) one_lasso_fit |> head() which(one_lasso_fit$true_beta != 0) which(one_lasso_fit$estimate != 0) niters <- 200 many_lasso_fits <- simulate_hdr(niters, n, p, s0, cores = 4) sim_summary <- simmary_coefs(many_lasso_fits) head(sim_summary) ggplot(sim_summary, aes(screened, beta_min)) + geom_boxplot() ggplot(sim_summary, aes(beta_min, mse)) + geom_point()"},{"path":"/reference/instance_hdr.html","id":null,"dir":"Reference","previous_headings":"","what":"instance_hdr\nSimulation for high-dimensional linear regression models. — instance_hdr","title":"instance_hdr\nSimulation for high-dimensional linear regression models. — instance_hdr","text":"Simulates data high-dimensional linear model applies user-specified functions fit model process results.","code":""},{"path":"/reference/instance_hdr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"instance_hdr\nSimulation for high-dimensional linear regression models. — instance_hdr","text":"","code":"instance_hdr(   n,   p,   s0,   xtype = c(\"toeplitz\", \"exp.decay\", \"equi.corr\"),   btype = \"U[-2,2]\",   permuted = TRUE,   x.par = switch(xtype, toeplitz = 1/3, equi.corr = 1/20, exp.decay = c(0.4, 5)),   yfun = y_standard_linear,   yargs = NULL,   fitfun = fit_glmnet_cvmin,   fitargs = NULL,   postfun = post_glmnet_cvmin,   postargs = NULL )"},{"path":"/reference/instance_hdr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"instance_hdr\nSimulation for high-dimensional linear regression models. — instance_hdr","text":"n Sample size, number rows design matrix. p Number random predictor variables columns design matrix. s0 Sparsity number nonzero coefficients true linear model. xtype, btype, permuted, x.par Linear model data generation parameters, see rXb details. yfun, yargs Function (optional) arguments generating outcome variable. fitfun, fitargs Function (optional) arguments fitting models simulated data. postfun, postargs Function (optional) arguments post-processing fitted models.","code":""},{"path":"/reference/instance_hdr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"instance_hdr\nSimulation for high-dimensional linear regression models. — instance_hdr","text":"Outputs postfun applying model fitted fitfun one instance simulated data.","code":""},{"path":"/reference/instance_hdr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"instance_hdr\nSimulation for high-dimensional linear regression models. — instance_hdr","text":"Generates random design matrix coefficient vector using hdi::rXb(). Generates outcome variable using yfun. Fits model data using method specified fitfun. Processes resulting model postfun.","code":""},{"path":"/reference/instance_hdr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"instance_hdr\nSimulation for high-dimensional linear regression models. — instance_hdr","text":"","code":"if (FALSE) { instance_hdr(n = 100, p = 200, s0 = 5) }"},{"path":"/reference/simcity-package.html","id":null,"dir":"Reference","previous_headings":"","what":"simcity: Parallel Simulations For Common Statistical Tasks — simcity-package","title":"simcity: Parallel Simulations For Common Statistical Tasks — simcity-package","text":"Simplifies generating simulated data common statistical tasks order test compare methods.","code":""},{"path":[]},{"path":"/reference/simcity-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"simcity: Parallel Simulations For Common Statistical Tasks — simcity-package","text":"Maintainer: Joshua R Loftus joftius@gmail.com (ORCID)","code":""},{"path":"/reference/simulate_hdr.html","id":null,"dir":"Reference","previous_headings":"","what":"simulate_hdr\nSimulation for high-dimensional linear regression model variable selection — simulate_hdr","title":"simulate_hdr\nSimulation for high-dimensional linear regression model variable selection — simulate_hdr","text":"Simulates data high-dimensional linear model applies user-specified functions fit model process results.","code":""},{"path":"/reference/simulate_hdr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simulate_hdr\nSimulation for high-dimensional linear regression model variable selection — simulate_hdr","text":"","code":"simulate_hdr(   niters,   n,   p,   s0,   xtype = c(\"toeplitz\", \"exp.decay\", \"equi.corr\"),   btype = \"U[-2,2]\",   permuted = TRUE,   x.par = switch(xtype, toeplitz = 1/3, equi.corr = 1/20, exp.decay = c(0.4, 5)),   yfun = y_standard_linear,   yargs = NULL,   fitfun = fit_glmnet_cvmin,   fitargs = NULL,   postfun = post_glmnet_cvmin,   postargs = NULL,   cores = NULL )"},{"path":"/reference/simulate_hdr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simulate_hdr\nSimulation for high-dimensional linear regression model variable selection — simulate_hdr","text":"niters Number simulation iterations. n Sample size, number rows design matrix. p Number random predictor variables columns design matrix. s0 Sparsity number nonzero coefficients true linear model. xtype, btype, permuted, x.par Linear model data generation parameters, see rXb details. yfun, yargs Function (optional) arguments generating outcome variable. fitfun, fitargs Function (optional) arguments fitting models simulated data. postfun, postargs Function (optional) arguments post-processing fitted models. cores Number cores parallel computation, passed makeCluster. Defaults half detectCores specified.","code":""},{"path":"/reference/simulate_hdr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"simulate_hdr\nSimulation for high-dimensional linear regression model variable selection — simulate_hdr","text":"List outputs postfun niters instances.","code":""},{"path":"/reference/simulate_hdr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"simulate_hdr\nSimulation for high-dimensional linear regression model variable selection — simulate_hdr","text":"Generates random design matrix coefficient vector using hdi::rXb(). Generates outcome variable using yfun. Fits model data using method specified fitfun. Processes resulting model postfun.","code":""},{"path":"/news/index.html","id":"simcity-010","dir":"Changelog","previous_headings":"","what":"simcity 0.1.0","title":"simcity 0.1.0","text":"Added NEWS.md file track changes package.","code":""}]
